<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端学习路线</title>
    <url>/2022/07/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="前端学习路线"><a href="#前端学习路线" class="headerlink" title="前端学习路线"></a>前端学习路线</h1><blockquote>
<p>这份学习路线并不完美，也不会有最终形态，正如前端不可预见、永无止境的未来。</p>
</blockquote>
<p>💂 + 💻 &#x3D; 👴🏽</p>
<p>建议先观看视频导读：<a href="https://www.bilibili.com/video/BV1nh411e7oG/">https://www.bilibili.com/video/BV1nh411e7oG/</a></p>
<h2 id="路线特点"><a href="#路线特点" class="headerlink" title="路线特点"></a>路线特点</h2><ol>
<li>一份全面的前端知识点大梳理和汇总</li>
<li>分阶段学习，每个阶段给出学习目标</li>
<li>使用符号对知识点的重要程度做了区分，按需学习</li>
<li>知识点附有描述和资源链接</li>
<li>提供一份清晰的个人顺序学习路线方法</li>
<li>提供大量优质学习资源</li>
</ol>
<h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>可根据知识点前的符号按需选学，并获取知识点描述和学习资源。</p>
<ul>
<li><p>⭐️ 必学（追求速成）</p>
</li>
<li><p>✅ 建议学（重要知识）</p>
</li>
<li><p>❗ 面试重点</p>
</li>
<li><p>❌ 一般没必要学习</p>
</li>
<li><p>💬 描述</p>
</li>
<li><p>📚 资源</p>
</li>
<li><p>🎯 目标</p>
</li>
</ul>
<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>前言 - 学编程需要的特质</li>
<li>前端学习七阶段<ol>
<li>前端入门</li>
<li>巩固基础</li>
<li>前端工程化</li>
<li>前端优化</li>
<li>前端生态</li>
<li>前端求职</li>
<li>前端未来</li>
</ol>
</li>
<li>我的前端学习路线</li>
<li>尾声 - 持续学习</li>
</ol>
<h2 id="前言-学编程需要的特质"><a href="#前言-学编程需要的特质" class="headerlink" title="前言 - 学编程需要的特质"></a>前言 - 学编程需要的特质</h2><p>相信自己有能力，那么你就真的会有！</p>
<ul>
<li>兴趣</li>
<li>坚持</li>
<li>付出</li>
<li>心态</li>
</ul>
<h2 id="一、前端入门"><a href="#一、前端入门" class="headerlink" title="一、前端入门"></a>一、前端入门</h2><ul>
<li><p>💬 描述：学习前端基础三件套，建议从实战开始，边学边练，培养兴趣，快速入门。</p>
</li>
<li><p>📚 资源</p>
<ul>
<li>freeCodecamp 在线编程：<a href="https://learn.freecodecamp.one/">https://learn.freecodecamp.one/</a></li>
<li>阿里云前端实战学习：<a href="https://edu.aliyun.com/roadmap/frontend">https://edu.aliyun.com/roadmap/frontend</a></li>
<li>W3Cschool 编程入门实战：<a href="https://www.w3cschool.cn/codecamp/">https://www.w3cschool.cn/codecamp/</a></li>
<li>pink老师前端入门教程：<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></li>
</ul>
</li>
<li><p>🎯 目标：了解和实践各语言的基础语法，并能使用开发工具来独立开发一个留言板网站。</p>
</li>
</ul>
<h3 id="⭐️-开发工具"><a href="#⭐️-开发工具" class="headerlink" title="⭐️ 开发工具"></a>⭐️ 开发工具</h3><ul>
<li>💬 描述：工欲善其事，必先利其器。</li>
</ul>
<h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><ul>
<li>⭐️ Chrome</li>
<li>✅ Edge</li>
<li>✅ Firefox</li>
<li>❌ Opera</li>
<li>Safari</li>
</ul>
<h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><ul>
<li>⭐️ VSCode</li>
<li>✅ WebStorm</li>
<li>Atom</li>
<li>⭐️ Sublime Text</li>
<li>HBuilder X</li>
<li>记事本</li>
<li>在线 IDE</li>
</ul>
<h4 id="文档笔记"><a href="#文档笔记" class="headerlink" title="文档笔记"></a>文档笔记</h4><ul>
<li>✅ Markdown 语法</li>
<li>✅ Typora</li>
<li>在线笔记<ul>
<li>语雀</li>
<li>腾讯文档</li>
<li>石墨文档</li>
<li>印象笔记</li>
</ul>
</li>
<li>Mdnice</li>
</ul>
<h3 id="⭐️-HTML"><a href="#⭐️-HTML" class="headerlink" title="⭐️ HTML"></a>⭐️ HTML</h3><ul>
<li><p>💬 描述：用于定义一个网页结构的基本技术。</p>
</li>
<li><p>📚 资源：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML">https://developer.mozilla.org/zh-CN/docs/Learn/HTML</a></p>
</li>
<li><p>⭐️ 基本语法</p>
</li>
<li><p>⭐️ 标签</p>
<ul>
<li>分区 div</li>
<li>标题 h1 ~ h6</li>
<li>段落 p</li>
<li>图像 img</li>
<li>列表 ul &#x2F; ol</li>
<li>超链接 a</li>
<li>表单 form</li>
<li>表格 table</li>
<li>框架 iframe</li>
</ul>
</li>
<li><p>⭐️ 属性</p>
</li>
<li><p>✅ HTML5 特性</p>
<ul>
<li>语义化标签</li>
<li>浏览器支持</li>
<li>多媒体标签</li>
<li>Canvas 画布</li>
<li>❌ 内联 SVG</li>
<li>本地存储<ul>
<li>localStorage</li>
<li>sessionStorage</li>
<li>❌ Web SQL</li>
</ul>
</li>
<li>Web Workers</li>
<li>应用缓存（Cache Manifest）</li>
<li>无障碍</li>
</ul>
</li>
</ul>
<h3 id="⭐️-CSS"><a href="#⭐️-CSS" class="headerlink" title="⭐️ CSS"></a>⭐️ CSS</h3><ul>
<li><p>💬 描述：层叠样式表，用于设计风格和布局。</p>
</li>
<li><p>📚 资源：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">https://developer.mozilla.org/zh-CN/docs/Learn/CSS</a></p>
</li>
<li><p>⭐️ 基本语法</p>
</li>
<li><p>⭐️ 引入方式</p>
<ul>
<li>行内样式</li>
<li>内部样式表</li>
<li>外部样式表</li>
</ul>
</li>
<li><p>⭐️ 选择器</p>
<ul>
<li>通用选择器</li>
<li>标签选择器</li>
<li>id 选择器</li>
<li>class 选择器</li>
<li>属性选择器</li>
<li>派生选择器<ul>
<li>后代选择器</li>
<li>子元素选择器</li>
<li>相邻兄弟选择器</li>
</ul>
</li>
<li>组合选择器</li>
<li>伪选择器</li>
<li>选择器优先级</li>
</ul>
</li>
<li><p>⭐️ 属性</p>
<ul>
<li>单位<ul>
<li>px</li>
<li>em</li>
<li>rem</li>
<li>vw</li>
<li>vh</li>
</ul>
</li>
<li>背景</li>
<li>文本</li>
<li>字体</li>
<li>列表</li>
<li>表格</li>
</ul>
</li>
<li><p>⭐️ 文档流</p>
<ul>
<li>标准流</li>
<li>浮动流</li>
<li>定位流</li>
</ul>
</li>
<li><p>⭐️ 内联元素 &#x2F; 块状元素</p>
</li>
<li><p>⭐️ 盒子模型</p>
<ul>
<li>content</li>
<li>padding</li>
<li>border</li>
<li>margin</li>
</ul>
</li>
<li><p>⭐️ 浮动</p>
<ul>
<li>设置浮动 float</li>
<li>清除浮动 clear</li>
</ul>
</li>
<li><p>⭐️ 定位</p>
<ul>
<li>static</li>
<li>absolute</li>
<li>fixed</li>
<li>relative</li>
<li>sticky</li>
</ul>
</li>
<li><p>⭐️ 层叠规则</p>
</li>
<li><p>❗ BFC 和 IFC 机制</p>
</li>
<li><p>CSS3</p>
<ul>
<li>⭐️ 响应式布局<ul>
<li>媒体查询</li>
<li>Flex 布局</li>
<li>Grid 布局</li>
<li>瀑布流</li>
</ul>
</li>
<li>动画</li>
<li>过渡</li>
<li>渐变</li>
<li>背景</li>
<li>边框</li>
<li>圆角</li>
<li>字体</li>
<li>2D &#x2F; 3D 转换</li>
</ul>
</li>
</ul>
<h3 id="⭐️-JavaScript"><a href="#⭐️-JavaScript" class="headerlink" title="⭐️ JavaScript"></a>⭐️ JavaScript</h3><ul>
<li><p>💬 描述：具有函数优先的轻量级，解释型或即时编译型的编程语言。</p>
</li>
<li><p>📚 资源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p>
</li>
<li><p>⭐️ 基本语法</p>
</li>
<li><p>⭐️ 数据类型</p>
<ul>
<li>值类型<ul>
<li>字符串 String</li>
<li>数组 Number</li>
<li>布尔 Boolean</li>
<li>空值 Null</li>
<li>未定义 Undefined</li>
<li>Symbol</li>
</ul>
</li>
<li>引用类型<ul>
<li>对象 Object</li>
<li>数组 Array</li>
<li>函数 Function</li>
</ul>
</li>
</ul>
</li>
<li><p>✅ 数据类型转换</p>
</li>
<li><p>✅ 函数</p>
<ul>
<li>⭐️ 概念</li>
<li>⭐️ 自定义函数</li>
<li>调用方式<ul>
<li>⭐️ 全局调用</li>
<li>构造函数调用</li>
<li>⭐️ 函数方法调用</li>
<li>apply</li>
<li>call</li>
</ul>
</li>
<li>✅❗ 闭包</li>
</ul>
</li>
<li><p>✅ 对象</p>
<ul>
<li>概念</li>
<li>this</li>
<li>原型链和继承</li>
<li>常用对象<ul>
<li>数字 Number</li>
<li>字符串 String 对象</li>
<li>日期 Date 对象</li>
<li>数组 Array</li>
<li>布尔 Boolean</li>
<li>算数 Math</li>
</ul>
</li>
<li>自定义对象</li>
</ul>
</li>
<li><p>✅❗ 作用域（作用域链）</p>
</li>
<li><p>✅ BOM API</p>
</li>
<li><p>⭐️ DOM API</p>
</li>
<li><p>⭐️ JSON</p>
</li>
<li><p>⭐️ Ajax</p>
</li>
<li><p>✅ JavaScript 执行机制</p>
</li>
</ul>
<h4 id="✅-ES6-特性"><a href="#✅-ES6-特性" class="headerlink" title="✅ ES6+ 特性"></a>✅ ES6+ 特性</h4><ul>
<li><p>💬 描述：新引入的 JavaScript 语法特性。</p>
</li>
<li><p>📚 资源：ES6 入门教程 <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p>
</li>
<li><p>let 和 const</p>
</li>
<li><p>变量解构赋值</p>
</li>
<li><p>对象扩展和新增方法</p>
</li>
<li><p>Symbol</p>
</li>
<li><p>Set 和 Map 数据结构</p>
</li>
<li><p>⭐️❗ Promise &amp; async &#x2F; await 异步编程</p>
</li>
<li><p>Generator 函数异步编程</p>
</li>
</ul>
<h2 id="二、巩固基础"><a href="#二、巩固基础" class="headerlink" title="二、巩固基础"></a>二、巩固基础</h2><ul>
<li><p>💬 描述：学习前端、计算机、软件开发相关基础知识，并复习巩固上阶段学到的前端三件套。</p>
</li>
<li><p>📚 资源</p>
<ul>
<li>《JavaScript 高级程序设计》：<a href="https://www.code-nav.cn/rd/?rid=28ee4e3e606b1e1a0e3cfd8952d172cf">https://www.code-nav.cn/rd/?rid=28ee4e3e606b1e1a0e3cfd8952d172cf</a></li>
<li>《JavaScript 忍者秘籍》：<a href="https://www.code-nav.cn/rd/?rid=28ee4e3e606b16c00e3c5b18609e3dc2">https://www.code-nav.cn/rd/?rid=28ee4e3e606b16c00e3c5b18609e3dc2</a></li>
</ul>
</li>
<li><p>🎯 目标：熟悉前端三件套语法，尤其是 JavaScript，并了解互联网、域名、浏览器、服务器等，扎实前端程序员的基本功，为下面进入实战开发做准备。</p>
</li>
</ul>
<h3 id="前端基础知识"><a href="#前端基础知识" class="headerlink" title="前端基础知识"></a>前端基础知识</h3><ul>
<li><p>✅ 互联网</p>
</li>
<li><p>⭐️ 域名</p>
</li>
<li><p>⭐️ DNS</p>
</li>
<li><p>⭐️ 服务器</p>
</li>
<li><p>✅ 浏览器</p>
<ul>
<li>浏览器 DOM 事件流 &#x2F; 事件委托</li>
<li>⭐️ 浏览器加载顺序</li>
<li>⭐️ 浏览器渲染过程</li>
<li>浏览器事件循环</li>
<li>浏览器同源策略</li>
<li>❗ 跨域解决方案</li>
<li>浏览器缓存</li>
<li>控制台调试技巧</li>
</ul>
</li>
<li><p>✅ HTTP</p>
<ul>
<li>❗ HTTP 请求过程</li>
<li>常见 HTTP 协议<ul>
<li>HTTP 1.0</li>
<li>⭐️ HTTP 1.1</li>
<li>HTTP 2</li>
<li>HTTP 3</li>
</ul>
</li>
<li>⭐️ HTTP 请求类别</li>
<li>⭐️ 常见状态码<ul>
<li>1xx 信息</li>
<li>2xx 成功</li>
<li>3xx 重定向</li>
<li>4xx 客户端错误</li>
<li>5xx 服务器错误</li>
</ul>
</li>
<li>WebSocket</li>
<li>⭐️ Cookie</li>
<li>Session</li>
<li>⭐️ HTTPS</li>
</ul>
</li>
</ul>
<h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><h4 id="✅-算法和数据结构"><a href="#✅-算法和数据结构" class="headerlink" title="✅ 算法和数据结构"></a>✅ 算法和数据结构</h4><ul>
<li><p>⭐️ 时间 &#x2F; 空间复杂度分析</p>
</li>
<li><p>数据结构</p>
<ul>
<li>数组</li>
<li>字符串</li>
<li>队列</li>
<li>栈</li>
<li>链表</li>
<li>集合</li>
<li>哈希表</li>
<li>二叉树</li>
</ul>
</li>
<li><p>算法</p>
<ul>
<li>排序</li>
<li>双指针</li>
<li>查找</li>
<li>分治</li>
<li>动态规划</li>
<li>递归</li>
<li>回溯</li>
<li>贪心</li>
<li>位运算</li>
<li>DFS</li>
<li>BFS</li>
<li>图</li>
</ul>
</li>
</ul>
<h4 id="✅-计算机网络"><a href="#✅-计算机网络" class="headerlink" title="✅ 计算机网络"></a>✅ 计算机网络</h4><ul>
<li>HTTP 协议</li>
<li>网络模型</li>
<li>UDP &#x2F; TCP 协议</li>
</ul>
<h4 id="✅-操作系统"><a href="#✅-操作系统" class="headerlink" title="✅ 操作系统"></a>✅ 操作系统</h4><ul>
<li>进程、线程</li>
<li>进程 &#x2F; 线程间通讯方式</li>
<li>进程调度算法</li>
<li>进程 &#x2F; 线程状态</li>
<li>死锁</li>
<li>内存管理</li>
</ul>
<h3 id="软件开发基础"><a href="#软件开发基础" class="headerlink" title="软件开发基础"></a>软件开发基础</h3><h4 id="✅-设计模式"><a href="#✅-设计模式" class="headerlink" title="✅ 设计模式"></a>✅ 设计模式</h4><ul>
<li>单例模式</li>
<li>代理模式</li>
<li>工厂模式</li>
<li>装饰者模式</li>
<li>观察者模式</li>
<li>策略模式</li>
<li>门面模式</li>
</ul>
<h4 id="⭐️-Git-版本控制"><a href="#⭐️-Git-版本控制" class="headerlink" title="⭐️ Git 版本控制"></a>⭐️ Git 版本控制</h4><ul>
<li>常用命令</li>
</ul>
<h4 id="✅-Linux-服务器"><a href="#✅-Linux-服务器" class="headerlink" title="✅ Linux 服务器"></a>✅ Linux 服务器</h4><ul>
<li>常用命令</li>
</ul>
<h4 id="✅-正则表达式"><a href="#✅-正则表达式" class="headerlink" title="✅ 正则表达式"></a>✅ 正则表达式</h4><h2 id="三、前端工程化"><a href="#三、前端工程化" class="headerlink" title="三、前端工程化"></a>三、前端工程化</h2><ul>
<li><p>💬 描述：前端工程化是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的为了提高开发过程中的开发效率，减少不必要的重复工作时间。</p>
</li>
<li><p>📚 资源</p>
<ul>
<li>什么是前端工程化？<a href="https://www.zhihu.com/question/433854153/answer/1713597311">https://www.zhihu.com/question/433854153/answer/1713597311</a></li>
</ul>
</li>
<li><p>🎯 目标：至少学会一门主流的前端开发框架（Vue &#x2F; React），并配合脚手架、组件库、工具等从 0 开始独立搭建并开发一个完整的前端网站，可以试着仿一些知名站点。要求遵循企业开发规范，将项目代码提交到代码仓库中，并独立发布上线，供他人访问。此外，建议抓住机会参与一些团队项目，感受团队开发模式和前端工程化的优势。</p>
</li>
</ul>
<h3 id="⭐️-研发流程"><a href="#⭐️-研发流程" class="headerlink" title="⭐️ 研发流程"></a>⭐️ 研发流程</h3><ol>
<li>技术选型</li>
<li>初始化</li>
<li>开发</li>
<li>本地测试</li>
<li>代码提交</li>
<li>编译、打包、构建</li>
<li>部署</li>
<li>集成测试</li>
<li>发布上线</li>
<li>监控运维</li>
</ol>
<h3 id="⭐️-代码托管"><a href="#⭐️-代码托管" class="headerlink" title="⭐️ 代码托管"></a>⭐️ 代码托管</h3><ul>
<li><p>💬 描述：集中存储、备份你的代码，还能和团队成员协作开发。</p>
</li>
<li><p>⭐️ GitHub</p>
</li>
<li><p>Gitee</p>
</li>
<li><p>GitLab</p>
</li>
</ul>
<h3 id="✅-Node-JS"><a href="#✅-Node-JS" class="headerlink" title="✅ Node.JS"></a>✅ Node.JS</h3><ul>
<li>💬 描述：一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！</li>
<li>📚 资源<ul>
<li>Node.js 官方教程：<a href="http://nodejs.cn/learn">http://nodejs.cn/learn</a></li>
<li>Node.js 入门：<a href="https://cnodejs.org/getstart">https://cnodejs.org/getstart</a></li>
</ul>
</li>
</ul>
<h4 id="⭐️-包管理"><a href="#⭐️-包管理" class="headerlink" title="⭐️ 包管理"></a>⭐️ 包管理</h4><ul>
<li><p>💬 描述：用于安装 Node.js 的扩展、工具等。</p>
</li>
<li><p>⭐️ npm</p>
</li>
<li><p>⭐️ yarn</p>
</li>
<li><p>❌ bower</p>
</li>
<li><p>✅ npx</p>
</li>
</ul>
<h4 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h4><ul>
<li>Express</li>
<li>Koa</li>
<li>Egg</li>
</ul>
<h3 id="开发框架-1"><a href="#开发框架-1" class="headerlink" title="开发框架"></a>开发框架</h3><ul>
<li>💬 描述：解决特定的问题,提高<em>开发</em>效率、简化我们的代码复杂度。</li>
</ul>
<h4 id="⭐️-CSS-框架"><a href="#⭐️-CSS-框架" class="headerlink" title="⭐️ CSS 框架"></a>⭐️ CSS 框架</h4><ul>
<li>✅ BootStrap</li>
<li>⭐️ Tailwind CSS</li>
</ul>
<h4 id="⭐️-JavaScript-框架"><a href="#⭐️-JavaScript-框架" class="headerlink" title="⭐️ JavaScript 框架"></a>⭐️ JavaScript 框架</h4><h5 id="⭐️-Vue"><a href="#⭐️-Vue" class="headerlink" title="⭐️ Vue"></a>⭐️ Vue</h5><ul>
<li>Vue Router</li>
<li>Vuex</li>
</ul>
<h5 id="⭐️-React"><a href="#⭐️-React" class="headerlink" title="⭐️ React"></a>⭐️ React</h5><ul>
<li>React DOM</li>
<li>React Router</li>
<li>Redux</li>
<li>MobX</li>
<li>React Hooks</li>
</ul>
<h5 id="❌-Angular"><a href="#❌-Angular" class="headerlink" title="❌ Angular"></a>❌ Angular</h5><ul>
<li>RxJS</li>
<li>NgRx</li>
</ul>
<h5 id="✅-Svelte"><a href="#✅-Svelte" class="headerlink" title="✅ Svelte"></a>✅ Svelte</h5><h5 id="✅-UmiJS"><a href="#✅-UmiJS" class="headerlink" title="✅ UmiJS"></a>✅ UmiJS</h5><h3 id="封装库"><a href="#封装库" class="headerlink" title="封装库"></a>封装库</h3><h4 id="⭐️-组件库"><a href="#⭐️-组件库" class="headerlink" title="⭐️ 组件库"></a>⭐️ 组件库</h4><ul>
<li>✅ LayUI</li>
<li>⭐️ ElementUI（Vue）</li>
<li>✅ VantUI（Vue）</li>
<li>⭐️ Ant Design（React）</li>
<li>Material UI</li>
</ul>
<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><ul>
<li>✅ AntV</li>
<li>Apache ECharts</li>
<li>HighCharts</li>
<li>D3.js</li>
</ul>
<h4 id="组件（插件）"><a href="#组件（插件）" class="headerlink" title="组件（插件）"></a>组件（插件）</h4><ul>
<li>富文本编辑器</li>
<li>弹窗</li>
<li>轮播图</li>
</ul>
<h4 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h4><ul>
<li>✅ jQuery</li>
<li>✅ Lodash</li>
<li>✅ Axios</li>
<li>时间处理 Moment.js</li>
</ul>
<h4 id="动效库"><a href="#动效库" class="headerlink" title="动效库"></a>动效库</h4><ul>
<li>✅ Animate.css</li>
<li>Ant Motion</li>
</ul>
<h4 id="字体图标库"><a href="#字体图标库" class="headerlink" title="字体图标库"></a>字体图标库</h4><ul>
<li>⭐️ IconFont</li>
<li>IconPark</li>
<li>Font Awesome</li>
</ul>
<h3 id="⭐️-脚手架"><a href="#⭐️-脚手架" class="headerlink" title="⭐️ 脚手架"></a>⭐️ 脚手架</h3><ul>
<li><p>💬 描述：快速生成新项目的目录模板，提升开发效率和开发舒适性。</p>
</li>
<li><p>📚 资源：<a href="https://www.jianshu.com/p/25ce8cf2e6a7">https://www.jianshu.com/p/25ce8cf2e6a7</a></p>
</li>
<li><p>Vue CLI</p>
</li>
<li><p>create-react-app</p>
</li>
<li><p>✅ Yeoman</p>
</li>
</ul>
<h3 id="⭐️-前端架构设计"><a href="#⭐️-前端架构设计" class="headerlink" title="⭐️ 前端架构设计"></a>⭐️ 前端架构设计</h3><ul>
<li><p>💬 描述：一系列工具和流程的集合，旨在提升前端代码的质量，并实现高效可持续的工作流。</p>
</li>
<li><p>模块化</p>
</li>
<li><p>组件化</p>
</li>
<li><p>✅ MVVM</p>
</li>
<li><p>设计原则</p>
</li>
<li><p>⭐️ SPA 单页应用</p>
</li>
<li><p>⭐️ 多页应用</p>
</li>
<li><p>✅ 前端路由</p>
</li>
<li><p>PWA</p>
</li>
<li><p>有损服务</p>
</li>
</ul>
<h4 id="✅-服务端渲染"><a href="#✅-服务端渲染" class="headerlink" title="✅ 服务端渲染"></a>✅ 服务端渲染</h4><ul>
<li><p>💬 描述：在服务端渲染 HTML 页面的模式。</p>
</li>
<li><p>📚 资源：<a href="https://www.zhihu.com/question/379563505">https://www.zhihu.com/question/379563505</a></p>
</li>
<li><p>Next.js（React）</p>
</li>
<li><p>Nuxt.js（Vue）</p>
</li>
<li><p>❌ Universal（Angular）</p>
</li>
</ul>
<h4 id="BFF"><a href="#BFF" class="headerlink" title="BFF"></a>BFF</h4><ul>
<li><p>💬 描述：Backend For Frontend（服务于前端的后端），就是服务器设计 API 时会考虑前端的使用，并在服务端直接进行业务逻辑的处理。</p>
</li>
<li><p>📚 资源：<a href="https://www.jianshu.com/p/eb1875c62ad3">https://www.jianshu.com/p/eb1875c62ad3</a></p>
</li>
<li><p>GraphQL</p>
</li>
</ul>
<h4 id="✅-微前端"><a href="#✅-微前端" class="headerlink" title="✅ 微前端"></a>✅ 微前端</h4><ul>
<li><p>💬 描述：将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，从而解决庞大的一整块后端服务带来的变更与扩展方面的限制。</p>
</li>
<li><p>📚 资源：<a href="https://zhuanlan.zhihu.com/p/96464401">https://zhuanlan.zhihu.com/p/96464401</a></p>
</li>
<li><p>qiankun</p>
</li>
<li><p>single-spa</p>
</li>
</ul>
<h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h3><ul>
<li><p>💬 描述：用 JavaScript 来写 CSS。</p>
</li>
<li><p>📚 资源：<a href="http://www.ruanyifeng.com/blog/2017/04/css_in_js.html">http://www.ruanyifeng.com/blog/2017/04/css_in_js.html</a></p>
</li>
<li><p>内联样式</p>
</li>
<li><p>声明样式</p>
</li>
<li><p>引入样式</p>
</li>
</ul>
<h4 id="⭐️-CSS-模块化"><a href="#⭐️-CSS-模块化" class="headerlink" title="⭐️ CSS 模块化"></a>⭐️ CSS 模块化</h4><ul>
<li>⭐️ CSS Modules</li>
<li>✅ styled-components</li>
<li>✅ Styled JSX</li>
<li>Emotion</li>
</ul>
<h3 id="✅-开发调试"><a href="#✅-开发调试" class="headerlink" title="✅ 开发调试"></a>✅ 开发调试</h3><ul>
<li><p>💬 描述：本地开发时热更新，提升开发效率。</p>
</li>
<li><p>webpack-dev-server</p>
</li>
<li><p>serve</p>
</li>
</ul>
<h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><ul>
<li><p>💬 描述：将内网外网通过 nat 隧道打通，让内网的网站、数据让外网可以访问。</p>
</li>
<li><p>Ngrok</p>
</li>
<li><p>NATAPP</p>
</li>
</ul>
<h3 id="⭐️-CSS-预编译"><a href="#⭐️-CSS-预编译" class="headerlink" title="⭐️ CSS 预编译"></a>⭐️ CSS 预编译</h3><ul>
<li><p>💬 描述：使用新的扩展语言以增强 CSS 的能力，并通过预编译的方式将其转换为浏览器认识的 CSS 代码。</p>
</li>
<li><p>⭐️ SASS</p>
</li>
<li><p>✅ PostCSS</p>
</li>
<li><p>Stylus</p>
</li>
<li><p>❌ LESS</p>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h4><ul>
<li>⭐️ UT 单元测试</li>
<li>SIT 系统集成测试</li>
<li>E2E 端到端测试</li>
<li>UAT 用户验收测试</li>
</ul>
<h4 id="✅-Mock"><a href="#✅-Mock" class="headerlink" title="✅ Mock"></a>✅ Mock</h4><ul>
<li><p>💬 描述：通过随机数据，模拟各种场景，增加单元测试的真实性。</p>
</li>
<li><p>Mock.js</p>
</li>
</ul>
<h4 id="✅-测试框架"><a href="#✅-测试框架" class="headerlink" title="✅ 测试框架"></a>✅ 测试框架</h4><ul>
<li><p>✅ Jest</p>
</li>
<li><p>Enzyme</p>
</li>
<li><p>✅ Puppeteer（Headless Browser）</p>
</li>
<li><p>Mocha</p>
</li>
<li><p>Jasmine</p>
</li>
</ul>
<h3 id="✅-代码质量"><a href="#✅-代码质量" class="headerlink" title="✅ 代码质量"></a>✅ 代码质量</h3><h4 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h4><ul>
<li><p>💬 描述：依照规范写出的代码会更加合理。</p>
</li>
<li><p>📚 资源：Airbnb 代码规范 <a href="https://github.com/BingKui/javascript-zh">https://github.com/BingKui/javascript-zh</a></p>
</li>
<li><p>CSS Style Guide</p>
</li>
<li><p>JavaScript Style Guide</p>
</li>
</ul>
<h4 id="类型校验"><a href="#类型校验" class="headerlink" title="类型校验"></a>类型校验</h4><ul>
<li>TypeScript</li>
</ul>
<h4 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h4><ul>
<li>ESLint</li>
<li>StyleLint</li>
</ul>
<h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><ul>
<li><p>💬 描述：根据配置自动格式化代码，统一格式。</p>
</li>
<li><p>Prettier</p>
</li>
</ul>
<h4 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h4><ul>
<li>约定式提交</li>
</ul>
<h4 id="提交检查"><a href="#提交检查" class="headerlink" title="提交检查"></a>提交检查</h4><ul>
<li><p>💬 描述：在提交代码时触发一些操作，比如检查代码的风格等。</p>
</li>
<li><p>pre-commit</p>
</li>
<li><p>husky</p>
</li>
</ul>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><h4 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h4><ul>
<li><p>💬 描述：按照配置好的流程自动打包构建项目，提高团队的开发效率，降低项目的维护难度。</p>
</li>
<li><p>Gulp</p>
</li>
<li><p>✅ npm script</p>
</li>
<li><p>Grunt</p>
</li>
</ul>
<h4 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h4><ul>
<li><p>💬 描述：将各种零散的📚 资源文件打包为可在浏览器等环境运行的代码。</p>
</li>
<li><p>⭐️ Webpack</p>
</li>
<li><p>✅ Rollup</p>
</li>
<li><p>✅ Vite</p>
</li>
<li><p>Parcel</p>
</li>
<li><p>Snowpack</p>
</li>
</ul>
<h3 id="CI-x2F-CD"><a href="#CI-x2F-CD" class="headerlink" title="CI &#x2F; CD"></a>CI &#x2F; CD</h3><ul>
<li>💬 描述：通过在应用开发阶段引入自动化来频繁向客户交付应用。</li>
<li>GitLab CI</li>
<li>✅ Jenkins</li>
</ul>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="⭐️-Web-服务器"><a href="#⭐️-Web-服务器" class="headerlink" title="⭐️ Web 服务器"></a>⭐️ Web 服务器</h4><h5 id="⭐️-Nginx"><a href="#⭐️-Nginx" class="headerlink" title="⭐️ Nginx"></a>⭐️ Nginx</h5><ul>
<li><p>💬 描述：高性能的 HTTP 和反向代理 web 服务器。</p>
</li>
<li><p>📚 资源：腾讯云动手实验室 <a href="https://cloud.tencent.com/developer/labs/gallery">https://cloud.tencent.com/developer/labs/gallery</a></p>
</li>
<li><p>反向代理</p>
</li>
<li><p>解决跨域</p>
</li>
<li><p>改写请求</p>
</li>
</ul>
<h5 id="✅-Apache"><a href="#✅-Apache" class="headerlink" title="✅ Apache"></a>✅ Apache</h5><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><h5 id="✅-Docker"><a href="#✅-Docker" class="headerlink" title="✅ Docker"></a>✅ Docker</h5><ul>
<li><p>💬 描述：容器是一个标准化的软件单元，它将代码及其所有依赖关系打包，以便应用程序从一个计算环境可靠快速地运行到另一个计算环境。Docker容器镜像是一个轻量的独立的可执行的软件包。包含程序运行的时候所需的一切：代码，运行时间，系统工具，系统库和设置。</p>
</li>
<li><p>📚 资源：Docker 从入门到实践 <a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></p>
</li>
<li><p>Dockerfile</p>
</li>
</ul>
<h5 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h5><h4 id="部署策略"><a href="#部署策略" class="headerlink" title="部署策略"></a>部署策略</h4><ul>
<li>全量发布</li>
<li>蓝绿部署</li>
<li>滚动发布</li>
<li>灰度发布</li>
</ul>
<h3 id="监控告警"><a href="#监控告警" class="headerlink" title="监控告警"></a>监控告警</h3><ul>
<li>前端埋点</li>
<li>错误监控</li>
<li>性能监控</li>
<li>行为监控</li>
</ul>
<h2 id="四、前端优化"><a href="#四、前端优化" class="headerlink" title="四、前端优化"></a>四、前端优化</h2><ul>
<li><p>💬 描述：通过分析和优化手段，提高网站的性能和用户体验。</p>
</li>
<li><p>🎯 目标：实践前端优化方法，从多个方面优化自己做过的项目，最好能将优化后的网站与原网站进行对比，得到一些数据和体验上的明显提升。</p>
</li>
</ul>
<h3 id="✅-性能优化"><a href="#✅-性能优化" class="headerlink" title="✅ 性能优化"></a>✅ 性能优化</h3><h4 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h4><ul>
<li><p>💬 描述：用于衡量一个 Web 页面的性能。</p>
</li>
<li><p>📚 资源：<a href="https://juejin.cn/post/6844904153869713416">https://juejin.cn/post/6844904153869713416</a></p>
</li>
<li><p>FP（First Paint）</p>
<ul>
<li>💬 描述：从开始加载到浏览器首次绘制像素到屏幕上的时间，也就是页面在屏幕上首次发生视觉变化的时间。</li>
</ul>
</li>
<li><p>FCP（First Contentful Paint）</p>
<ul>
<li>💬 描述：浏览器首次绘制来自 DOM 的内容的时间。</li>
</ul>
</li>
<li><p>FMP（First Meaningful Paint）</p>
<ul>
<li>💬 描述：页面的主要内容绘制到屏幕上的时间。</li>
</ul>
</li>
<li><p>FSP（First Screen Paint）</p>
<ul>
<li>💬 描述：页面从开始加载到首屏内容全部绘制完成的时间，用户可以看到首屏的全部内容。</li>
</ul>
</li>
<li><p>TTI（Time to Interactive）</p>
<ul>
<li>💬 描述：表示网页第一次完全达到可交互状态的时间点，浏览器已经可以持续性的响应用户的输入。</li>
</ul>
</li>
</ul>
<h4 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h4><ul>
<li><p>性能监控</p>
<ul>
<li>Performance API</li>
</ul>
</li>
<li><p>样式优化</p>
</li>
<li><p>JavaScript 优化</p>
<ul>
<li>防抖</li>
<li>节流</li>
</ul>
</li>
<li><p>代码分割</p>
</li>
<li><p>📚 资源压缩</p>
</li>
<li><p>打包优化</p>
</li>
<li><p>服务器优化</p>
</li>
<li><p>缓存优化</p>
<ul>
<li>Service Worker</li>
</ul>
</li>
<li><p>动画性能</p>
</li>
<li><p>dns-prefetch</p>
</li>
<li><p>Lazy loading</p>
</li>
<li><p>优化启动性能</p>
<ul>
<li>异步化</li>
</ul>
</li>
<li><p>渲染优化</p>
</li>
<li><p>网络优化</p>
</li>
<li><p>移动端性能优化</p>
</li>
<li><p>✅ CDN</p>
<ul>
<li>💬 描述：内容分发网络，是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</li>
<li>📚 资源：BootCDN <a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></li>
</ul>
</li>
</ul>
<h3 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h3><ul>
<li>设计系统</li>
<li>骨架屏</li>
</ul>
<h3 id="✅-兼容性"><a href="#✅-兼容性" class="headerlink" title="✅ 兼容性"></a>✅ 兼容性</h3><h4 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><ul>
<li>normalize.css</li>
<li>html5shiv.js</li>
<li>respond.js</li>
<li>Babel</li>
<li>Polyfill</li>
</ul>
<h4 id="屏幕分辨率兼容性"><a href="#屏幕分辨率兼容性" class="headerlink" title="屏幕分辨率兼容性"></a>屏幕分辨率兼容性</h4><h4 id="跨平台兼容性"><a href="#跨平台兼容性" class="headerlink" title="跨平台兼容性"></a>跨平台兼容性</h4><h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><ul>
<li><p>💬 描述：搜索引擎优化，利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。</p>
</li>
<li><p>📚 资源：百度搜索📚 资源平台 <a href="https://ziyuan.baidu.com/cooperateresource/index">https://ziyuan.baidu.com/cooperateresource/index</a></p>
</li>
<li><p>robots.txt</p>
</li>
<li><p>description</p>
</li>
<li><p>keywords</p>
</li>
<li><p>SiteMap</p>
</li>
<li><p>HTML 标签优化</p>
</li>
<li><p>站内链接建设</p>
</li>
<li><p>友情链接</p>
</li>
</ul>
<h3 id="✅-安全"><a href="#✅-安全" class="headerlink" title="✅ 安全"></a>✅ 安全</h3><ul>
<li>⭐️ XSS</li>
<li>CSRF</li>
<li>反爬虫</li>
<li>SQL 注入</li>
<li>DDoS</li>
</ul>
<h2 id="五、前端生态"><a href="#五、前端生态" class="headerlink" title="五、前端生态"></a>五、前端生态</h2><ul>
<li><p>💬 描述：如今，前端领域的范围越来越广，出现了更多前端工程师需要了解和关注的技术。</p>
</li>
<li><p>🎯 目标：能用学到的前端技术去做更多的事情，比如开发个人博客、文档网站、小程序、APP 等。</p>
</li>
</ul>
<h3 id="⭐️-静态站点构建"><a href="#⭐️-静态站点构建" class="headerlink" title="⭐️ 静态站点构建"></a>⭐️ 静态站点构建</h3><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><ul>
<li>React Static</li>
</ul>
<h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul>
<li>✅ Gatsby.js</li>
<li>✅ Docusaurus</li>
<li>Hugo</li>
<li>Hexo</li>
</ul>
<h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><ul>
<li>JekyII</li>
<li>⭐️ Docsify</li>
<li>VuePress</li>
<li>✅ Dumi</li>
</ul>
<h3 id="✅-大前端"><a href="#✅-大前端" class="headerlink" title="✅ 大前端"></a>✅ 大前端</h3><p>💬 描述：前端技术的融合更加紧密，应用的领域也更加广泛，前端领域的内容呈现多样化，除了网站外，还可以用前端技术跨平台开发 Android、iOS、小程序、虚拟现实、增强现实等。</p>
<h4 id="移动应用"><a href="#移动应用" class="headerlink" title="移动应用"></a>移动应用</h4><ul>
<li>Hybrid</li>
<li>WebView</li>
<li>React Native</li>
<li>Flutter</li>
</ul>
<h4 id="移动应用打包"><a href="#移动应用打包" class="headerlink" title="移动应用打包"></a>移动应用打包</h4><ul>
<li>Weex</li>
<li>Cordova</li>
<li>Phonegap</li>
<li>Ionic</li>
</ul>
<h4 id="桌面应用"><a href="#桌面应用" class="headerlink" title="桌面应用"></a>桌面应用</h4><ul>
<li>Electron</li>
<li>NW.js</li>
<li>Proton Native</li>
</ul>
<h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><ul>
<li>原生</li>
<li>WebView</li>
</ul>
<h4 id="跨端开发框架"><a href="#跨端开发框架" class="headerlink" title="跨端开发框架"></a>跨端开发框架</h4><ul>
<li>✅ uni-app</li>
<li>✅ Taro</li>
<li>Flutter</li>
<li>Chameleon</li>
<li>Wepy</li>
<li>Rax</li>
</ul>
<h4 id="移动端调试"><a href="#移动端调试" class="headerlink" title="移动端调试"></a>移动端调试</h4><ul>
<li>Chrome Dev Tools</li>
<li>Android Simulator</li>
<li>IOS Simulator</li>
</ul>
<h3 id="✅-Serverless"><a href="#✅-Serverless" class="headerlink" title="✅ Serverless"></a>✅ Serverless</h3><ul>
<li>💬 描述：一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署，你甚至可以管理某个具体功能或端口的部署，这就能让开发者快速迭代，更快速地开发软件。</li>
</ul>
<h3 id="✅-云开发"><a href="#✅-云开发" class="headerlink" title="✅ 云开发"></a>✅ 云开发</h3><ul>
<li><p>💬 描述：云端一体化的后端云服务 ，采用 Serverless 架构，免去了移动应用构建中繁琐的服务器搭建和运维。同时云开发提供的静态托管、命令行工具（CLI）、Flutter SDK 等能力降低了应用开发的门槛。使用云开发可以构建完整的小程序&#x2F;小游戏、H5、Web、移动 App 等应用。</p>
</li>
<li><p>✅ 腾讯云云开发</p>
</li>
<li><p>阿里云云开发</p>
</li>
</ul>
<h3 id="低代码"><a href="#低代码" class="headerlink" title="低代码"></a>低代码</h3><ul>
<li><p>💬 描述：无需编码（零代码）或通过少量代码就可以快速生成应用程序的开发平台。通过可视化进行应用程序开发的方法，使具有不同经验水平的开发人员可以通过图形化的用户界面，使用拖拽组件和模型驱动的逻辑来创建网页和移动应用程序。</p>
</li>
<li><p>腾讯云低码</p>
</li>
<li><p>阿里宜搭</p>
</li>
</ul>
<h2 id="六、前端求职"><a href="#六、前端求职" class="headerlink" title="六、前端求职"></a>六、前端求职</h2><ul>
<li><p>💬 描述：求职是一个漫长的过程，建议拉长战线，尽早准备。</p>
</li>
<li><p>🎯 目标：找到理想的工作。</p>
</li>
</ul>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul>
<li>2020 秋招面经汇总：<a href="https://www.nowcoder.com/discuss/205497">https://www.nowcoder.com/discuss/205497</a></li>
</ul>
<h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><ul>
<li>超级简历</li>
</ul>
<h3 id="面试题库"><a href="#面试题库" class="headerlink" title="面试题库"></a>面试题库</h3><ul>
<li>牛客前端工程师面试宝典：<a href="https://www.nowcoder.com/tutorial/96/f5212664ab664984882b00635066ded2">https://www.nowcoder.com/tutorial/96/f5212664ab664984882b00635066ded2</a></li>
<li>前端面试每日 3+1：<a href="https://github.com/haizlin/fe-interview">https://github.com/haizlin/fe-interview</a></li>
<li>React 面试题目 &amp; 题解：<a href="https://github.com/sudheerj/reactjs-interview-questions">https://github.com/sudheerj/reactjs-interview-questions</a></li>
</ul>
<h3 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h3><ul>
<li>前端面经汇总：<a href="https://www.nowcoder.com/discuss/experience?tagId=644">https://www.nowcoder.com/discuss/experience?tagId=644</a></li>
</ul>
<h3 id="面试实战"><a href="#面试实战" class="headerlink" title="面试实战"></a>面试实战</h3><ul>
<li>AI 模拟面试：<a href="https://www.nowcoder.com/interview/ai/cover?jobTagId=644">https://www.nowcoder.com/interview/ai/cover?jobTagId=644</a></li>
</ul>
<h2 id="七、前端未来"><a href="#七、前端未来" class="headerlink" title="七、前端未来"></a>七、前端未来</h2><ul>
<li><p>💬 描述：前端未来可能的发展趋势和热门技术。</p>
</li>
<li><p>🎯 目标：关注前沿，持续进步。</p>
</li>
<li><p>WebAssembly</p>
</li>
<li><p>智能 UI</p>
</li>
<li><p>React Server Component</p>
</li>
<li><p>CSS Houdini</p>
</li>
</ul>
<h3 id="WebComponents"><a href="#WebComponents" class="headerlink" title="WebComponents"></a>WebComponents</h3><ul>
<li>HTML templates（HTML模板）</li>
<li>Custom elements（自定义元素）</li>
<li>Shadow DOM（影子DOM）</li>
</ul>
<h2 id="我的前端学习路线"><a href="#我的前端学习路线" class="headerlink" title="我的前端学习路线"></a>我的前端学习路线</h2><p>虽然上面整理的学习路线知识点非常多，但是大家也别太担心，其实按照一定顺序和方法来学习，并不会很难，聊聊我的学习经历。</p>
<h3 id="1-快速入门，培养兴趣"><a href="#1-快速入门，培养兴趣" class="headerlink" title="1. 快速入门，培养兴趣"></a>1. 快速入门，培养兴趣</h3><p>刚开始学习前端时，一定要以培养兴趣、快速入门为目标。我入门前端时，由于没有基础、啥都不懂，因此选择在线实战教程网站来学习，跟着教程案例一行行把代码敲下来，实时浏览显示效果，很轻松地就把 HTML、CSS、JavaScript 的语法基础过了一遍。但是这时，我对看过的知识点没有什么印象，基本是看了就忘，当我想要自己写一个网站，也根本无从下手。</p>
<p>于是，我开始试着死记硬背代码，结果发现背了之后还是不会写。那干脆一不做二不休，直接打开编辑器和教程网站，把之前在线实战时敲过的代码复制粘贴到编辑器中，然后再修改保存，到浏览器中打开文件。这样虽然要在编辑器和浏览器中来回切换，但起码能看到自己的网页文件运行的效果了。后来，我利用浏览器开发者工具提升了自己开发网站的调试效率，敲出的代码达不到满意的效果时，就再去查，再改，再浏览，最后终于完成了一个留言板网站！</p>
<p>通过这件事，我明白了一个道理，既然记不住知识，那就先别强行记忆，上手多写，忘了就去查不就好了？不要担心自己知识不够做不出来，只要你去试，都一定能实现。</p>
<h3 id="2-多看多写，巩固基础"><a href="#2-多看多写，巩固基础" class="headerlink" title="2. 多看多写，巩固基础"></a>2. 多看多写，巩固基础</h3><p>在这种操作下，我虽然能使用基础三件套开发简易网站了，但做的很慢，还老出问题。于是，我开始完整地看了几本前端入门和项目实战书籍，有三件套入门的，也有响应式网站设计的，还有 JavaScript 综合讲解的，以及一套完整的视频教程，通过这些来复习巩固之前学过的知识，打好了基础，并且了解了更多实战教程上没见到的知识。</p>
<p>看书和视频的过程中，我跟着做了几个简易的网站，也是边看边做。在这之后，我发现自己渐渐地能够脱离文档来写网站了！</p>
<h3 id="3-框架学习，学以致用"><a href="#3-框架学习，学以致用" class="headerlink" title="3. 框架学习，学以致用"></a>3. 框架学习，学以致用</h3><p>但是，总感觉开发网站时，什么都要自己写，重复的代码写一大堆，很麻烦。于是，我试着上网搜了解决这些问题的方法，发现可以用组件库减少重复编写 HTML 和 CSS 代码，于是学了 LayUI，其实和之前一样的，就是打开官网找到要用的组件，然后复制到项目中修改就行了，写的多了竟然还真记住了一些（虽然这个没必要记）。</p>
<p>界面和样式代码简化了，但是 JavaScript 写的我依旧头疼。于是我决定进入下一个阶段的学习，当时先看了本书叫《锋利的 jQuery》来学习 jQuery，学会之后使用它趁热打铁做了几个网站，发现的确能大大简化繁琐的 JavaScript DOM 操作，让我尝到了甜头，又有了继续学习前端的动力。</p>
<p>在那之后大概半年，我开始学习主流前端框架 Vue，也是跟着视频教程学，并且结合 ElementUI 组件库开发了一个响应式网站。不得不说，习惯了用原生 JavaScript 和 jQuery 开发后，再去用 Vue 开发，真的是爽飞了，小有成就感。</p>
<h3 id="4-根据需要，自主学习"><a href="#4-根据需要，自主学习" class="headerlink" title="4. 根据需要，自主学习"></a>4. 根据需要，自主学习</h3><p>在那之后，我就是通过不断地做项目来积累经验，既然编程知识太多学不完，那我就随需随学，逐渐拓宽自己的知识面。举个例子，我要做一个移动端 H5 页面，那就去搜 Vue 的移动端组件库，学会了 MintUI、VantUI 等；项目中要处理日期，那我就去搜日期处理库，学会了 Moment.js；项目重复文件和代码太多，我就去网上搜一些组件化、模块化的最佳实践；项目代码太大、加载太慢，我就去网上搜一些前端压缩、性能优化的方式；要把开发好的项目变成 APP，那我就去网上搜到了 Cordova 等打包工具；跟其他同学一起做项目时比较混乱、开发效率低，我就去搜了一些代码规范、前端工程化等；遇到 Bug 时，也是自己去网上搜索解决方案，并且还要看看有没有知识点是我遗漏的，我会再去弥补学习。通过不断实践、不断遇到问题和自主解决问题，我始终保持着学习的积极性，学到了越来越多前端的知识，并通过归纳总结来加深印象。</p>
<h3 id="5-渐入佳境，拓宽视野"><a href="#5-渐入佳境，拓宽视野" class="headerlink" title="5. 渐入佳境，拓宽视野"></a>5. 渐入佳境，拓宽视野</h3><p>在那之后，我学前端技术非常快了，像 React、TypeScript、Redux、Dva、Umi、Lerna 等等都随用随学，随学随用。此外，我不仅仅关注前端网页开发本身，还同时关注前端的生态和发展，学习了微前端、Serverless、云开发、低代码等技术，因此个人的能力提升也很大。如今在鹅厂工作中也是，面对各种不同技术栈的前端项目，我都能迎难而上，毕竟不会就学嘛！</p>
<p>哦，写的渐入佳境，我都忘了，自己是一名后端工程师，还搁这儿吹牛逼呢（ 所以本路线难免会有不专业的地方，请大家见谅~</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>总结一下，学前端的路线其实就一句话：基础三件套 &#x3D;&gt; 巩固基础 &#x3D;&gt; 学习框架 &#x3D;&gt; 多做项目 &#x3D;&gt; 按需学习 &#x3D;&gt; 拓宽视野。还有一个学任何编程技术都要注意的点，全程多敲代码！多敲代码！多敲代码！</p>
<h2 id="尾声-持续学习"><a href="#尾声-持续学习" class="headerlink" title="尾声 - 持续学习"></a>尾声 - 持续学习</h2><h3 id="优秀前端人的特质"><a href="#优秀前端人的特质" class="headerlink" title="优秀前端人的特质"></a>优秀前端人的特质</h3><ul>
<li><p>深厚的功底</p>
</li>
<li><p>良好的编码习惯</p>
</li>
<li><p>发现问题的洞察力</p>
</li>
<li><p>思维灵活，善于思考</p>
</li>
<li><p>追求技术，紧跟前沿</p>
</li>
<li><p>有创造力，有行动力</p>
</li>
<li><p>追求用户体验</p>
</li>
<li><p>时刻保持好奇</p>
</li>
<li><p>全栈意识</p>
</li>
<li><p>解决问题的能力强</p>
</li>
<li><p>懂得合作和高效沟通</p>
</li>
<li><p>重视工作，同样重视生活</p>
</li>
<li><p>责任心和全局观</p>
</li>
<li><p>个人的进步能带动团队的进步</p>
</li>
</ul>
<h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><ul>
<li>编程导航（包含以下所有资源，强烈推荐 👍）：<a href="https://www.code-nav.cn/">https://www.code-nav.cn</a></li>
<li>freeCodecamp 在线编程：<a href="https://learn.freecodecamp.one/">https://learn.freecodecamp.one/</a></li>
<li>阿里云前端实战学习：<a href="https://edu.aliyun.com/roadmap/frontend">https://edu.aliyun.com/roadmap/frontend</a></li>
<li>W3Cschool 编程入门实战：<a href="https://www.w3cschool.cn/codecamp/">https://www.w3cschool.cn/codecamp/</a></li>
<li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs/gallery">https://cloud.tencent.com/developer/labs/gallery</a></li>
<li>pink老师前端入门教程：<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></li>
<li>MDN 前端文档：<a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></li>
<li>Node.js 入门：<a href="https://cnodejs.org/getstart">https://cnodejs.org/getstart</a></li>
<li>前端清单：<a href="https://cheatsheets.devtool.tech/">https://cheatsheets.devtool.tech/</a></li>
<li>前端小课：<a href="https://lefex.github.io/">https://lefex.github.io/</a></li>
<li>被删的前端游乐场：<a href="http://www.godbasin.com/">http://www.godbasin.com/</a></li>
<li>《ES6 入门教程》：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>谷歌 Web 开发者：<a href="https://developers.google.com/web">https://developers.google.com/web</a></li>
<li>JavaScript 明星项目：<a href="https://risingstars.js.org/2020/zh">https://risingstars.js.org/2020/zh</a></li>
<li>Best of JS：<a href="https://bestofjs.org/">https://bestofjs.org/</a></li>
<li>Codewars：<a href="https://www.codewars.com/?language=javascript">https://www.codewars.com/?language=javascript</a></li>
<li>Vue.js examples：<a href="https://vuejsexamples.com/">https://vuejsexamples.com/</a></li>
</ul>
<h3 id="前端资讯"><a href="#前端资讯" class="headerlink" title="前端资讯"></a>前端资讯</h3><ul>
<li>掘金资讯：<a href="https://juejin.cn/news">https://juejin.cn/news</a></li>
<li>InfoQ：<a href="https://www.infoq.cn/topic/Front-end">https://www.infoq.cn/topic/Front-end</a></li>
<li>daily.dev：<a href="https://daily.dev/">https://daily.dev/</a></li>
</ul>
<h3 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h3><ul>
<li><p>掘金：<a href="https://juejin.cn/frontend">https://juejin.cn/frontend</a></p>
</li>
<li><p>腾讯前端 IMWEB：<a href="http://imweb.io/">http://imweb.io</a></p>
</li>
<li><p>腾讯 Web 前端团队 Alloy Team：<a href="http://www.alloyteam.com/">http://www.alloyteam.com</a></p>
</li>
<li><p>淘宝前端团队：<a href="http://taobaofed.org/">http://taobaofed.org</a></p>
</li>
<li><p>百度 Web 前端研发部：<a href="http://fex.baidu.com/">http://fex.baidu.com</a></p>
</li>
<li><p>京东凹凸实验室：<a href="https://aotu.io/">https://aotu.io</a></p>
</li>
<li><p>360 奇舞团：<a href="https://75team.com/">https://75team.com</a></p>
</li>
<li><p>七牛团队技术博客：<a href="http://blog.qiniu.com/">http://blog.qiniu.com</a></p>
</li>
<li><p>有赞技术团队：<a href="https://tech.youzan.com/tag/front-end/">https://tech.youzan.com/tag/front-end/</a></p>
</li>
<li><p>百度 EFE Tech：<a href="https://efe.baidu.com/">https://efe.baidu.com/</a></p>
</li>
<li><p>css-tricks：<a href="https://css-tricks.com/archives">https://css-tricks.com/archives</a></p>
</li>
<li><p>web.dev：<a href="https://web.dev/blog/">https://web.dev/blog/</a></p>
</li>
</ul>
<h3 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h3><ul>
<li>前期学习以培养兴趣为主，不要过于追求深层理解。</li>
<li>前端学习不能靠死记硬背，要多敲代码、多做项目实践。</li>
<li>不要急于求成，踏实积累才是硬道理。</li>
</ul>
]]></content>
      <tags>
        <tag>学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>博客踩坑初体验</title>
    <url>/2022/06/18/%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>​	大概一年前就有过写个人博客的想法，但是因为各种原因一直没有落实。写博客是一件非常有意思的事情，当时的想法是——可以，但没必要。现在放假有时间了，而且假期有自学安排，也是打算通过写博客的方式来记录和总结自身所学。</p>
<h3 id="博客的动态和静态之分"><a href="#博客的动态和静态之分" class="headerlink" title="博客的动态和静态之分"></a>博客的动态和静态之分</h3><h4 id="1-1-静态博客"><a href="#1-1-静态博客" class="headerlink" title="1.1 静态博客"></a>1.1 静态博客</h4><p>HTML（超文本标记语言）格式的网页通常被称为静态网页，是直接渲染生成HTML标准的文件呈现给客户端，不需要数据库的支持。静态博客也可以包含文本、声音、图像等。</p>
<h4 id="1-2-动态博客"><a href="#1-2-动态博客" class="headerlink" title="1.2 动态博客"></a>1.2 动态博客</h4><p>动态是网页通过动态调用再解析而成的，生产的网页不是HTML文件，需要服务器端伪装成HTML文件呈现给客户端。&gt; 这里的<em><strong>动</strong></em>是指与后台数据库的交互，进行数据传递的过程。</p>
<p><em>我的理解就是，静态的只能展示自己本地上传的东西。动态的可以有用户注册，评论等功能。当然，现在有各种第三方插件支持，静态的博客也可以通过插件做到互动等功能。不过现在静态博客已经够我用作记录和总结的用途了。</em></p>
<h3 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h3><h4 id="2-1-Node-js的版本问题"><a href="#2-1-Node-js的版本问题" class="headerlink" title="2.1 Node.js的版本问题"></a>2.1 Node.js的版本问题</h4><p>node.js的版本依赖一直都是个坑。就我目前在各种项目搭建时遇到的坑里面（之前用Vue框架的项目也是），大概三分之一都跟node的版本依赖有关系！！！就是这么绝…… 以至于现在养成一个习惯，搭建过程中遇到看不懂的错误。先去百度一下，看看要求的Node版本（有用到的话），再看看你的版本。或许问题就迎刃而解了~  </p>
<p>这里推荐下一个NVM（一个Node版本管理工具，可以简单操作Node版本的安装、查看、切换等），有了这个工具，在需要不同的Node版本环境时，就可以随时切换了还是很方便滴👍</p>
<p>Hexo现在要求的Node是14，我本来的Node是16。版本过高所以不行，然后我又去下了一个10版本的Node。想着这肯定很稳定吧，然而！版本又太低了。还真得精确到个位啊……</p>
<h4 id="2-2-Hexo-start-4000端口无法访问"><a href="#2-2-Hexo-start-4000端口无法访问" class="headerlink" title="2.2 Hexo start 4000端口无法访问"></a>2.2 Hexo start 4000端口无法访问</h4><p>这个网上一搜有很多原因，主要有</p>
<ol>
<li><p>下了福昕PDF阅读器，这个阅读器的默认端口号也是4000。关掉这个进程或者另外给hexo设置一个端口号就行。<em>自定义端口的命令是 hexo server -p 5000</em>（参数自定）</p>
</li>
<li><p>服务器的4000端口没有对外开放，参考<a href="https://blog.csdn.net/weixin_59248227/article/details/123776619">(62条消息) 解决hexo在服务器上成功运行后，4000端口无法访问的问题_DO VIS69的博客-CSDN博客_4000端口</a></p>
</li>
</ol>
<h4 id="2-3-git-部署错误"><a href="#2-3-git-部署错误" class="headerlink" title="2.3 git 部署错误"></a>2.3 git 部署错误</h4><p>git  fatal: unable to access ‘<a href="https://github.com/Unique-type/blog.git/&#39;">https://github.com/Unique-type/blog.git/&#39;</a>: OpenSSL SSL_read: Connection was aborted, errno 10053   不能正常访问用git 访问github仓库，原因  服务器SSL证书没有通过 关掉就好</p>
<p>用指令git config –global http.sslVerify “false”</p>
<p>参考：(62条消息) Git报错解决：fatal: unable to access ‘<a href="https://github.com/.......%E2%80%98">https://github.com/.......‘</a>: OpenSSL SSL_read: Connection was reset_盏茶作酒的博客-CSDN博客](<a href="https://blog.csdn.net/qq_40999917/article/details/116213557">https://blog.csdn.net/qq_40999917/article/details/116213557</a>)</p>
<h4 id="2-4-config-yml中的编辑"><a href="#2-4-config-yml中的编辑" class="headerlink" title="2.4  _config.yml中的编辑"></a>2.4  _config.yml中的编辑</h4><p>在进行自定义时，有些是在根目录下的_config.yml中编辑才生效，有些则是在主题目录下的_config.yml中编辑才生效。而且尽量不要两个地方都自定义，很容易发生报错。因为Hexo是可以换主题的，有模块化的思想。比如博客中Subtitles有一个值，要是写到根目录下config中，即使换了一个主题，主题的config也能接收到值。相反，要是只写在主题目录下的config中，换了主题文件过后，值就不见了。</p>
<h3 id="后期完善"><a href="#后期完善" class="headerlink" title="后期完善"></a>后期完善</h3><p>hexo还有很多个性玩法，可以参考： <a href="https://blog.csdn.net/qq_43827595/article/details/104324443">(62条消息) hexo博客matery主题个性化配置_白马金羁侠少年的博客-CSDN博客_matery</a></p>
<h3 id="hexo从github上克隆到本地"><a href="#hexo从github上克隆到本地" class="headerlink" title="hexo从github上克隆到本地"></a>hexo从github上克隆到本地</h3><p>如果以后要迁移（保不准哪天就重装系统了）</p>
<ul>
<li>安装HEXO，npm install -g hexo-cli</li>
<li>克隆github上的源文件，git clone ‘仓库地址’</li>
<li>生成缺少的文件，npm install （因为上传git时有.gitignore，github上没存node_modules等依赖包）<ul>
<li>npm install hexo-deployer-git –save</li>
</ul>
</li>
<li>生成、部署 hexo g         hexo d</li>
</ul>
]]></content>
      <categories>
        <category>避坑专栏</category>
      </categories>
      <tags>
        <tag>博客踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>Beginning</title>
    <url>/2022/06/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>​	现在是大二下学期的暑假，身边有些认识的朋友同学都已经到公司去实习了。而我好像还是依旧没有找到明确方向（😆诶）。思考了几天后，觉得自己现在还是更适合用这个假期来自学吧，实习的话……感觉不太适合目前的状态。争取下次假期就去<br>​	现在主要是先把下学期的课程大概都了解一下，和落实英语学习。实验室前端方向，我的底子还很弱。之前很多基础的东西都是粗略带过，正好下学期有前端的课程，假期预习可以顺便都补下😐</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统笔记</title>
    <url>/2022/10/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="第二章-进程的控制与描述"><a href="#第二章-进程的控制与描述" class="headerlink" title="第二章 进程的控制与描述"></a>第二章 进程的控制与描述</h3><blockquote>
<p><strong>重点</strong></p>
<ol>
<li><p>掌握什么是进程</p>
<blockquote>
<ul>
<li>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位</li>
<li>进程由 1。程序段 2。数据段 3。PCB 三部分组成</li>
<li>PCB是进程存在的唯一标志</li>
<li>进程的管理者（操作系统）所需要的数据都在PCB中</li>
</ul>
<p>进程的特征</p>
<ol>
<li>动态性</li>
<li>并发性</li>
<li>独立性</li>
<li>异步性</li>
<li>结构性</li>
</ol>
</blockquote>
</li>
<li><p>线程的概念和线程与进程的区别</p>
</li>
<li><p>用户态线程和核心态线程的映射模型</p>
</li>
</ol>
<p><strong>难点</strong></p>
<ol>
<li><p>进程状态及状态转换</p>
<blockquote>
<p>进程有三种基本状态</p>
<ul>
<li>运行态，占有CPU，并在CPU上运行</li>
<li>就绪态，已经具备运行条件，万事俱备，只欠CPU</li>
<li>阻塞态（又称等待态），因等待某一事件而暂时不能运行</li>
</ul>
<p>另外两种叫</p>
<ul>
<li>创建态，系统完成创建进程的一系列工作</li>
<li>终止态</li>
</ul>
</blockquote>
<p><img src="/.com//blog\source\images\image-20221029142810502.png" alt="image-20221029142810502"></p>
</li>
<li><p>进程如何创建和撤销</p>
</li>
</ol>
</blockquote>
<h4 id="2-1-前趋图和程序执行"><a href="#2-1-前趋图和程序执行" class="headerlink" title="2.1 前趋图和程序执行"></a>2.1 前趋图和程序执行</h4><p>程序顺序执行和并发执行的特征</p>
<table>
<thead>
<tr>
<th align="center">顺序</th>
<th align="center">并发</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1顺序性</td>
<td align="center">1间断性</td>
</tr>
<tr>
<td align="center">2封闭性</td>
<td align="center">2失去封闭性</td>
</tr>
<tr>
<td align="center">3可再现性</td>
<td align="center">3不可再现性</td>
</tr>
</tbody></table>
<h3 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章 处理机调度与死锁"></a>第三章 处理机调度与死锁</h3><blockquote>
<p><strong>重点</strong></p>
<ol>
<li>非抢占式调度和抢占式调度的区别</li>
<li>各种调度算法的衡量条件</li>
<li>理解死锁的四个必要条件</li>
</ol>
<p><strong>难点</strong></p>
<ol>
<li>银行家算法的理解和应用</li>
<li>掌握抢占式调度算法</li>
</ol>
</blockquote>
<h4 id="3-2调度算法"><a href="#3-2调度算法" class="headerlink" title="3.2调度算法"></a>3.2调度算法</h4><p>一共有七种调度算法</p>
<p>1. </p>
<h4 id="3-7死锁避免"><a href="#3-7死锁避免" class="headerlink" title="3.7死锁避免"></a>3.7死锁避免</h4>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>读《JavaScript语言精髓与编程实践》</title>
    <url>/2022/06/19/%E8%AF%BB%E3%80%8AJavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E3%80%8B/</url>
    <content><![CDATA[<p>​	每个语言都有各自的特性，而JavaScript还是一门包含多种语言特性的混合范型语言。这也是让我感到有些难学的原因，给我的感觉就是要专门为这个语言记的东西有些多了。为了不只是停留在粗浅的层面，现尝试透彻的理解。</p>
<p>​	一个程序员需要掌握编程语言的多少特性？这里的<em>特性</em>就是违反你直觉的事儿，在你吃着火锅唱着歌儿，开开心心编程的时候，消磨人心的存在。就比如JS“0.1+0.2≠0.3”的现象，这涉及到JS的数值类型和浮点数的精度问题。而且，由于JS是一门快速诞生的语言。有多快呢？据说两个星期。这就意味着有很多细节上的东西，在最初设计时没有来得及考虑的很完善。</p>
<h3 id="第一章-发展"><a href="#第一章-发展" class="headerlink" title="第一章   发展"></a>第一章   发展</h3><p>​	作者自述在前端的经历，前端各种技术概念的兴起与迭代。其中一些称得上是古老的技术，也曾经大放光彩。各大公司带着产品相互搏杀的故事同样精彩。这也让我再次感叹，现在能看到的、普及开的所谓“潮流、热门”的技术和概念；往往在十多二十年前就有这么一群人处在前沿学习、使用、和建设。那么二三十年后，大众能看到的技术崛起和热门趋势又会是什么呢？</p>
<ul>
<li><p>JS之父说过“最初利用JS的目的就是客户端的应用比比从服务器重新加载页面即可回应用户的输入信息，并且提供一种功能强大的图形工具包”</p>
<ul>
<li><blockquote>
<p>这就对应了两个功能，<strong>展现</strong>和<strong>交互</strong>，这正好是前端的两个主要定义；这也是为什么JS主要应用于前端领域的原因</p>
</blockquote>
</li>
</ul>
</li>
<li><p>2000年，浏览器取代传统的操作系统桌面逐渐成为热门的“客户端”解决方案</p>
</li>
<li><p>2003年，ECMA（<u>欧洲计算机制造协会</u>）启动了工作组来进行下一代JS的标准化，称为ES4，但是这次的标准化不尽人意。原因是这个小组把ES4（又称JS2）设计成了另一个新、大、复杂的语言。而后到2009年，ES4标准化宣布暂停。不久后，发布了ES5。所以<strong>ES5</strong>和ES4基本没有什么关系，而是对ES3.1所代表的语言方向的一个补充。</p>
</li>
<li><p>2005年，B&#x2F;S开发界都在热情追捧AJAX（<strong>J</strong>代表JS，<strong>X</strong>代表XML）——基于JavaScript语言实现的技术框架。但事实也很简单，AJAX本质就是“使用一个对象的方法”。</p>
<ul>
<li><blockquote>
<p>在AJAX出现早期就有人注意到技术的本质不过是同步执行</p>
</blockquote>
</li>
</ul>
</li>
<li><p>2015年，<em><strong>划时代的ES6</strong></em>。几乎集成了当时其他语言梦寐以求的所有明星特性，解决了很多遗留问题。ES6提出四大组件，Promise、类、模块、生成器&#x2F;迭代器。为并行语言、面向对象语言、结构化语言、函数式语言做铺垫。</p>
</li>
<li><p>JS的语言原子，可以说只有两个。一是对象，二是函数。</p>
</li>
<li><p>JS的应用环境主要由<em>宿主环境</em>与<em>运行环境</em>构成。宿主环境指外壳程序（shell）和Web浏览器等，运行环境则是JS引擎内建的。</p>
<p><img src="/images/JS%E7%9A%84%E5%BA%94%E7%94%A8%E7%8E%AF%E5%A2%83.png" alt="JS的应用环境组成"></p>
</li>
<li><p>脚本引擎必须运行在一个宿主之中，并由该宿主创建和维护脚本引擎实例的<em>运行期环境</em></p>
</li>
</ul>
<h3 id="第二章-JS的语法"><a href="#第二章-JS的语法" class="headerlink" title="第二章    JS的语法"></a>第二章    JS的语法</h3><h4 id="语法的概念"><a href="#语法的概念" class="headerlink" title="语法的概念"></a>语法的概念</h4><p>语言中的标识符，各语言间都大同小异。一般分两类，一类用于命名语法、符号等抽象概念，另一类用于命名数据。通俗一点就是<strong>关键字</strong>和<strong>变量常量</strong>。而在这背后是有<em>绑定</em>的支持，关键字和语义逻辑绑定，变量和其存储数据的地址绑定。</p>
<blockquote>
<p>关键字对语义逻辑的绑定结果，是对作用域的限定。变量对地址的绑定结果，是对变量生存周期的限定。</p>
</blockquote>
<h4 id="基本的数据类型"><a href="#基本的数据类型" class="headerlink" title="基本的数据类型"></a>基本的数据类型</h4><p>JS的数据类型算是比较特殊的，一共七种</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="center">含义</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">undefined</td>
<td align="center">未定义</td>
<td align="center">未声明或者声明过但未赋值的变量</td>
</tr>
<tr>
<td align="left">number</td>
<td align="center">数值</td>
<td align="center">除赋值操作之外，只有数值与数值的运算结果是数值；</td>
</tr>
<tr>
<td align="left">string</td>
<td align="center">字符串</td>
<td align="center">可以直接读取指定位置的单个字符，但不能修改（和JAVA一样）</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="center">布尔值</td>
<td align="center">true&#x2F;false</td>
</tr>
<tr>
<td align="left">symbol</td>
<td align="center">符号</td>
<td align="center">ES6开始支持，它的实例是唯一不可变的，用于确保对象的属性不重复</td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">函数</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">object</td>
<td align="center">对象</td>
<td align="center">基于原型继承与类继承的面向对象模型</td>
</tr>
</tbody></table>
<h4 id="原子对象类型系统"><a href="#原子对象类型系统" class="headerlink" title="原子对象类型系统"></a>原子对象类型系统</h4><p>ES中Null是一个类型，且有一个唯一值；而在JS中null是对象类型的一个特殊实例。</p>
<p>ES语言类型中没有函数类型，函数是对象类型的一个变体，（对象类型的一种实现）；而JS中函数是第一类型（Frist class type）。ES的这种定义方便了规范制定。由于Null是特殊的、在语言层面就被解释的，所以经常用Null来识别各种结构、定义、和逻辑。</p>
<h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p><strong>显式声明</strong></p>
<p>用关键字事先声明类型，例如var number &#x3D; 10;</p>
<p><strong>隐式声明</strong></p>
<p>未提前声明而直接用语句，例如 number &#x3D; 10;</p>
<h5 id="let-与-var-的区别"><a href="#let-与-var-的区别" class="headerlink" title="let 与 var 的区别"></a>let 与 var 的区别</h5><p>很多情况下JS编程都是机械式地用var，好像Var能包容万物一般。的确var（variable-可变物）就是用来代替任何类型的。但是var也有它做不到的地方。</p>
<ul>
<li><p>var声明的变量，其作⽤域为当前函数、模块或全局；let声明的变量，其作⽤域总是在当前的代码块，例如语句块。 </p>
</li>
<li><p>在同⼀个代码块中，可以⽤var来多次声明变量名，这在语法分析中与声明⼀次没有区别；⽽⽤let却只能声明一次，覆盖⼀个已经声明的let变量（或者⽤let去覆盖⼀个已声明过的标识符）会导致语法错误。 </p>
</li>
<li><p>⽤⼾代码可以在声明语句之前使⽤所声明的var变量，这时该变量的值是undefined；⽽let声明的变量必须先声明后使⽤，声明语句之前的代码引⽤了let变量会触发异常，这也会导致typeof成为⼀个不安全的运算</p>
</li>
</ul>
<p>在全局代码块上</p>
<table>
<thead>
<tr>
<th align="left">let（const、class类似）</th>
<th align="left">var</th>
</tr>
</thead>
<tbody><tr>
<td align="left">遵从“块级作⽤域”规则，因此即使出现在全局代码块中也只是声明为“全局作用域”中的标识符，而不是全局对象global上的属性</td>
<td align="left">相当于在全局对象global上声明了⼀个属性，进⽽使所有代码都能将这些声明作为全局变量来访问</td>
</tr>
</tbody></table>
<h5 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h5><p>var [x,y] &#x3D; [1,2]        	&#x2F;&#x2F;数组结构赋值</p>
<p>let{clientHeight: height , clientWidth: width}   &#x3D; window.document.body;            &#x2F;&#x2F;使用对象解构赋值</p>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><p>不强制运算结果的数据类型。但是运算符会将操作数隐式地转换为布尔类型，并且支持布尔短路（<em>如果一个布尔运算表达式能提前确定结果，就不进行后续的运算，直接返回结果</em>）</p>
<h5 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h5><p>只有 “+”运算符，和一个“[ ]”下标符（可以通过下标对字符串对应位置进行存取），ES6添加Symbol.terator；但是不管哪种都不能改变字符串中的字符值，这和JAVA中的String类型一样</p>
<h5 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h5><ol>
<li>位运算JS强制运算目标为有符号的32位整型数 </li>
<li>目标为非数值时就强制转换为数值（非数值先被转换成NaN的数值再来计算，所以结果也是NaN）<em>NaN表示非数值的一个数值</em></li>
<li>浮点数就取整</li>
</ol>
<h5 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h5><ol>
<li><h6 id="等值检测"><a href="#等值检测" class="headerlink" title="等值检测"></a>等值检测</h6>记住一些特殊的转换，比如空字符串被转换为false，这就造成了“ <em><u>“ “ &#x3D;&#x3D; false</u></em> 的结果为true的情况 ”，比较两个值是否相同还有另一个方法*<u>Object.is</u>*(值1，值2)。掌握对象的valueOf（）方法</li>
</ol>
<blockquote>
<p>&#x3D;&#x3D; 和Object.is（）的区别在于，&#x3D;&#x3D;会先对两边的操作数做隐式的转化再比较，而Object.is()不会做类型转换</p>
<p>特别 -0和+0在“&#x3D;&#x3D;”、“&#x3D;&#x3D;&#x3D;”中是相等的，在Object.is()中是不相等的</p>
<p>undefined与null值总是相等</p>
<p>NaN不等于自身</p>
</blockquote>
<ol start="2">
<li><h6 id="序列检测"><a href="#序列检测" class="headerlink" title="序列检测"></a>序列检测</h6>一个数据的值投射到数轴上的一个点，比较其序列值的大小。比如char类型就是有序的（0~255），虽然JS没有Char类型但是String中的每一个字符被当作单一字符检测。</li>
</ol>
<h5 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h5><p>JS的字符串赋值是复制该字符串的地址（这样避免了空间的大量开销），这也造成了限制</p>
<ol>
<li><p>不能直接修改字符串中的字符</p>
</li>
<li><p>字符串连接运算导致写复制，会产生新的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str = &quot;hello&quot;;//创建存储&quot;hello&quot;的字符串，创建&quot;world&quot;的字符串，创建保存连接结果的字符串</span><br><span class="line">str += &quot;world&quot;;//把Str的当前内容&quot;hello&quot;复制到结果中，把&quot;world&quot;复制到结果中，更新str使其指向结果</span><br></pre></td></tr></table></figure>
</li>
<li><p>不能改变字符串的长短，修改length()值没有意义</p>
</li>
</ol>
<h4 id="函数相关表达式"><a href="#函数相关表达式" class="headerlink" title="函数相关表达式"></a>函数相关表达式</h4><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>没有名字的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function ()&#123;//匿名函数整个用（）包起来</span><br><span class="line">    console.log(&quot;哈士奇&quot;);</span><br><span class="line">&#125;)//不会执行，在此处加上()就会立即执行</span><br><span class="line">(function (str)&#123;//带参数，立即执行</span><br><span class="line">    console.log(&quot;狗&quot; + str);</span><br><span class="line">&#125;(&quot;哈士奇&quot;))</span><br><span class="line">----在对象中</span><br><span class="line">var obj=&#123;</span><br><span class="line">name:“小明”,</span><br><span class="line">age:18,</span><br><span class="line">fn:function()&#123;</span><br><span class="line">return “我叫”+this.name+“今年”+this.age+“岁了！”;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(obj.fn());//我叫小明今年18岁了！</span><br><span class="line">-----回调函数</span><br><span class="line">setInterval(function()&#123;</span><br><span class="line">console.log(&quot;我其实是一个回调函数，每次1秒钟会被执行一次&quot;);</span><br><span class="line">&#125;,1000);</span><br></pre></td></tr></table></figure>



<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(参数列表) =&gt; &#123;函数体&#125;</span><br><span class="line">例如 var foo = (val) =&gt; &#123;return val&#125;;</span><br><span class="line">console.log(foo(100))//打印100</span><br></pre></td></tr></table></figure>

<p>New运算</p>
<p>JS的 class类只能被New运算符调用，不像大多数的构造器不同可以用new和 ( )两种方式调用</p>
<h4 id="特殊作用的运算符"><a href="#特殊作用的运算符" class="headerlink" title="特殊作用的运算符"></a>特殊作用的运算符</h4><p><strong>类型运算符   <em>typeof</em></strong></p>
<p><strong>展开语法</strong>    “…”</p>
<ul>
<li><p>放在可迭代对象前（例如数组），就代表将操作数展开为一组值</p>
</li>
<li><p>放在普通对象前，将该对象展开为一组属性</p>
</li>
<li><p>放在函数调用界面上，就是把展开结果作为参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo(100,...[3,2])//把数组中的3，2作为参数依次传入</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>面向表达式的运算符</strong>    <em>await</em> <em>yield</em></p>
<h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>一般表达式语句、赋值语句与隐式语句、函数调用语句、变量声明语句、分支语句、循环语句、一般子句</p>
<blockquote>
<p>需要注意赋值语句具有隐式声明变量的作用：一个变量在赋值前未被声明，则脚本会首先隐式地声明该变量，然后完成赋值。这种情况下，隐式声明的变量总是<em><strong>全局变量</strong></em>。所以它相当于是<u><em>从局部变量泄露到了全局</em></u>，在严格模式下，这种像未声明变量赋值的操作是被禁止的。</p>
</blockquote>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>即使一个JS文件没有export语句，它也可以被其他文件作为模块导入，JS会为其创建一个空的导出名字表。所以<em>“用export语句来表明自己是模块”</em>和<em>“普通文件被作为模块加载”</em>两种情况在ES看来没有区别</p>
<p>JS约定只能在模块文件的顶层使用import&#x2F;export语句；装载模块时，模块的顶层代码会被执行一次。import后的模块名出现和被依赖的次序就是那些顶层代码被执行的次序。<em><strong>模块可以被多次加载，首次加载后就被缓存，所以后续有出现过的模块则它们的顶层代码不会被反复执行</strong></em></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>export</td>
<td>规定输出模块的对外接口</td>
</tr>
<tr>
<td>import</td>
<td>输入模块提供的接口</td>
</tr>
<tr>
<td>default</td>
<td>指定模块输出的默认接口</td>
</tr>
<tr>
<td>*</td>
<td>代表输入模块的所有接口</td>
</tr>
<tr>
<td>as</td>
<td>用于重命名输出和输入接口</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单装载</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;module-name&quot;</span> ;</span><br><span class="line"><span class="comment">//命名导入</span></span><br><span class="line"><span class="keyword">import</span> defaultExport <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;importsList&#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="comment">//名字空间导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aNamespace <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认导入的扩展形式</span></span><br><span class="line"><span class="keyword">import</span> defaultExport, ...<span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>除非在创建和启动JS引擎时将它设置为严格模式，或者通过模块来加载整个系统；否则在默认情况下用户代码只能指定一个有限范围的严格模式。</p>
<p>如果”use strict”;语句发生在最外部的前面，那么全局都要受影响；而”use strict”是在某个函数内部的情况，则不会影响到外面的代码。这和局部和全局的概念有相似之处</p>
<h5 id="将严格代码执行在非严格模式中"><a href="#将严格代码执行在非严格模式中" class="headerlink" title="将严格代码执行在非严格模式中"></a>将严格代码执行在非严格模式中</h5><p>在处于非严格模式下要执行严格模式可以通过两种方式</p>
<ol>
<li>使用间接调用的eval()函数，<em>eval意为，</em></li>
<li>使用New Funciton方式创建的函数，</li>
</ol>
<h4 id="运算符的二义性"><a href="#运算符的二义性" class="headerlink" title="运算符的二义性"></a>运算符的二义性</h4><p><img src="/images/%E8%AF%AD%E4%B9%89%E4%BA%8C%E5%BC%82%E6%80%A7.png" alt="语义二异性"></p>
<p>需要注意的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [ [1]  [1] ];  //这里右边部分会被运算为undefined</span><br><span class="line">为什么呢？因为[]既是解构赋值又是数组下标，第一个[1]被理解成一个数组的字面量，只有一个元素Arr[0] = 1;由于它是一个对象，第二个[1]被解释为数组下标，但是Arr数组现在只有一个元素，其下标为[1]的地址还没有存放数据，所以是undefined</span><br><span class="line">这里就被解释成</span><br><span class="line">arr = [1];</span><br><span class="line">a = [arr[1]];</span><br></pre></td></tr></table></figure>

<h3 id="第三章-面向对象语言特性"><a href="#第三章-面向对象语言特性" class="headerlink" title="第三章  面向对象语言特性"></a>第三章  面向对象语言特性</h3><h4 id="3-1语法"><a href="#3-1语法" class="headerlink" title="3.1语法"></a>3.1语法</h4><h5 id="对象声明与实例创建（NEW）"><a href="#对象声明与实例创建（NEW）" class="headerlink" title="对象声明与实例创建（NEW）"></a>对象声明与实例创建（NEW）</h5><p>构造器用来创建和初始化对象，用New运算符产生对象实例。</p>
<ol>
<li>构造函数内自动创建一个空白对象</li>
<li>函数上下文this指向该对象</li>
<li>函数体内的语句执行</li>
<li>函数自动返回上下文对象，即使没有返回Return语句</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">funciton fun()&#123;</span><br><span class="line">	this.a = 3;</span><br><span class="line">    this.b = 6;</span><br><span class="line">    //这里相当于隐藏了一个return this，因为自动返回上下文对象</span><br><span class="line">&#125;</span><br><span class="line">var obj = new fun(); //返回的上下文对象被变量Obj接收了</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E4%B8%8A%E4%B8%8B%E6%96%87%E8%A7%84%E5%88%99.png" alt="上下文规则"></p>
<p>另一种方式——声明对象自变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="comment">//结构简单、方便</span></span><br><span class="line">    name :<span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    value : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JS中的数组默认值为undefined，<em>与C++默认为0不同</em></p>
</blockquote>
<h5 id="类的继承体系"><a href="#类的继承体系" class="headerlink" title="类的继承体系"></a>类的继承体系</h5><p>声明类的本质是声明一个构造器函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">className</span> [<span class="keyword">extends</span> parentClass]&#123;<span class="comment">//原始语法</span></span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有用extends明确表示继承自哪个父类，则默认继承Object类</span></span><br><span class="line"><span class="comment">//不需要指定构造过程时，constructor()声明可以省略</span></span><br><span class="line">---------------------------------下面三种方式是等价的</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myobject</span>&#123;&#125;<span class="comment">//类声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Myobject</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//构造函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Myobject</span> = <span class="keyword">new</span> <span class="title class_">Function</span>;<span class="comment">//变量声明</span></span><br></pre></td></tr></table></figure>

<p>无论是用函数声明还是类声明，都需要通过原型来声明对象实例的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Myobject</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Myobject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Name</span> = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line"><span class="title class_">Myobject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Method</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">   ------------------------------- </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myobject</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">Name</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">Name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Myobject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Name</span> = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Myobject</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习笔记</title>
    <url>/2022/10/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
